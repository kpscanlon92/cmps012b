head	1.11;
access;
symbols;
locks;
comment	@ * @;


1.11
date	2014.02.08.01.13.35;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.02.16.01.20.12;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.02.16.01.19.42;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.02.12.01.49.07;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.02.12.01.48.39;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.02.12.01.47.38;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.08.03.02.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.11.09.02.38.10;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.02.16.04.45.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.16.04.44.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.10.02.53.12;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: strlist.c,v 1.10 2013-02-15 17:20:12-08 - - $

// Reads in a sequence of lines and then prints them out in debug
// format.  strdup(3) copies these lines onto the heap.  Read the
// comments in the file "numlist.c" first.

#include <assert.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//
// Declaration for linked list of nodes.
//
typedef struct node node;
struct node {
   char *string;
   node *link;
};

int main (int argc, char **argv) {
   (void) argc; // warning: unused parameter 'argc'
   char *progname = basename (argv[0]);
   node *head = NULL;
   char buffer[256];
   int linenr;
   for (linenr = 1; ; ++linenr) {

      // Read a line of input and check to see if it ends with
      // a newline character.  Print a message if not.

      char *gotline = fgets (buffer, sizeof buffer, stdin);
      if (gotline == NULL) break;

      char *nlpos = strchr (buffer, '\n');
      if (nlpos != NULL) {
         *nlpos = '\0';
      }else {
         fprintf (stderr, "%s: %d: unterminated line: %s\n",
                  progname, linenr, buffer);
      };

      // Allocate a node and initialize it to point a a heap copy
      // of the input line.  Note that strdup(3) contains a call
      // to malloc(3), so we need the NULL check there as well.

      node *tmp = malloc (sizeof (struct node));
      assert (tmp != NULL);
      tmp->string = strdup (buffer);
      assert (tmp->string != NULL);
      tmp->link = head;
      head = tmp;
   };

   // Print the results in debug mode.

   printf ("%s: head= %p\n", argv[0], head);
   while (head != NULL) {
      node *old = head;
      head = head->link;
      printf ("%s: %p-> node {\n"
              "    string= %p->\"%s\",\n"
              "    link= %p}\n",
              progname, old, old->string, old->string, old->link);
   };

   return EXIT_SUCCESS;
}

/*
//TEST// (echo "this is line 1" \
//TEST// ;echo "" \
//TEST// ;echo "the previous line has length 0." \
//TEST// ;echo "fit the buffer." \
//TEST// ;echo "Last Line." \
//TEST// ) | valgrind --leak-check=full --log-file=strlist.lisval \
//TEST// ./strlist >strlist.lisout 2>&1
//TEST// mkpspdf strlist.ps strlist.c* strlist.lis*
*/

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.8 2013/02/12 01:49:07 - - $
d5 1
a5 1
// comments in the file `numlist.c' first.
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.8 2013-02-11 17:49:07-08 - - $
d22 2
a23 1
int main (int, char **argv) {
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.7 2013-02-11 17:48:39-08 - - $
d22 1
a22 2
int main (int argc, char **argv) {
   (void) argc; // warning: unused parameter 'argc'
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.6 2013-02-11 17:47:38-08 - - $
d23 1
a23 1
   (void) argv; // warning: unused parameter 'argc'
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.5 2013-02-07 19:02:45-08 - - $
d23 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.4 2012-11-08 18:38:10-08 - - $
d57 1
a57 1
   printf ("%s: head= %p\n", argv[0], (void*) head);
d64 1
a64 2
              progname, (void*) old, (void*) old->string,
              old->string, (void*) old->link);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.3 2012-02-15 20:45:26-08 - - $
d16 1
a16 1
typedef struct node *node_ref;
d19 1
a19 1
   node_ref link;
d24 1
a24 1
   node_ref head = NULL;
d47 6
a52 6
      node_ref new = malloc (sizeof (struct node));
      assert (new != NULL);
      new->string = strdup (buffer);
      assert (new->string != NULL);
      new->link = head;
      head = new;
d59 1
a59 1
      node_ref old = head;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.2 2012-02-15 20:44:42-08 - - $
a21 1
// LINTED (argument unused in function)
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.1 2012-02-09 18:53:12-08 - - $
d22 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: strlist.c,v 1.3 2011-02-03 17:39:07-08 - - $
a27 2
      node_ref new = NULL;
      char *nlpos = NULL;
d35 1
a35 1
      nlpos = strchr (buffer, '\n');
d47 1
a47 1
      new = malloc (sizeof (struct node));
@

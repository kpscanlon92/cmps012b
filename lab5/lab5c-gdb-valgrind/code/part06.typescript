Script started on Sun 04 May 2014 06:33:02 PM PDT
You are currently using 27% (132.1 MiB) of your 488.3 MiB quota.
]0;kpscanlo@unix1:code[kpscanlo@unix1 code]$ mk list2.c
CSOURCE=err2.c EXECBIN=err2
+ cid + err2.c
+ checksource err2.c
+ catnv err2.c
+ for arg in '$*'
+ '[' err2.c = -f ']'
+ label err2.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo err2.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv err2.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err2.c -o err2'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err2.c -o err2'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 err2.c -o err2 -lm
+ cat err2.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
err2.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: err2.c,v 1.5 2014-04-23 21:19:13-07 - - $
     2	
     3	#include <stdio.h>
     4	#include <string.h>
     5	int main (void) {
     6	   char *p = 20;
     7	   int c = strcmp (p, "foo");
     8	   printf ("%d\n", c);
     9	   return 0;
    10	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err2.c -o err2
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
err2.c: In function â€˜mainâ€™:
err2.c:6:14: warning: initialization makes pointer from integer without a cast [enabled by default]
    char *p = 20;
              ^
+ set +x
============================================================
CSOURCE=err.c EXECBIN=err
+ cid + err.c
+ checksource err.c
+ catnv err.c
+ for arg in '$*'
+ '[' err.c = -f ']'
+ label err.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo err.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv err.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err.c -o err'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err.c -o err'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 err.c -o err -lm
+ cat err.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
err.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: err.c,v 1.5 2014-04-23 21:19:13-07 - - $
     2	
     3	#include <stdio.h>
     4	void foo() {
     5	   int x = 20;
     6	   int *p = &x;
     7	}
     8	void bar() {
     9	   int a;
    10	   int *p;
    11	   printf ("%d %p\n", a, p);
    12	}
    13	int main() {
    14	   foo();
    15	   bar();
    16	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 err.c -o err
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
err.c: In function â€˜fooâ€™:
err.c:6:9: warning: unused variable â€˜pâ€™ [-Wunused-variable]
    int *p = &x;
         ^
err.c: In function â€˜barâ€™:
err.c:11:11: warning: â€˜aâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("%d %p\n", a, p);
           ^
err.c:11:11: warning: â€˜pâ€™ is used uninitialized in this function [-Wuninitialized]
+ set +x
============================================================
CSOURCE=list1.c EXECBIN=list1
+ cid + list1.c
+ checksource list1.c
+ catnv list1.c
+ for arg in '$*'
+ '[' list1.c = -f ']'
+ label list1.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo list1.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv list1.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list1.c -o list1'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list1.c -o list1'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list1.c -o list1 -lm
+ cat list1.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
list1.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: list1.c,v 1.3 2013-02-08 18:00:41-08 - - $
     2	
     3	#include <assert.h>
     4	#include <stdio.h>
     5	
     6	typedef struct node node;
     7	struct node {
     8	   char *word;
     9	   node *link;
    10	};
    11	
    12	int main (int argc, char **argv) {
    13	   node *head;
    14	   for (int argi = 0; argi < 5; ++argi) {
    15	      node *node = malloc (sizeof (struct node));
    16	      assert (node != NULL);
    17	      node->word = argv[argi];
    18	      node->link = head;
    19	      head = node;
    20	   }
    21	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
    22	      printf ("%p->node {word=%p->[%s], link=%p}\n",
    23	              curr, curr->word, curr->word, curr->link);
    24	   }
    25	   return 9;
    26	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list1.c -o list1
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
list1.c: In function â€˜mainâ€™:
list1.c:15:7: warning: implicit declaration of function â€˜mallocâ€™ [-Wimplicit-function-declaration]
       node *node = malloc (sizeof (struct node));
       ^
list1.c:15:20: warning: incompatible implicit declaration of built-in function â€˜mallocâ€™ [enabled by default]
       node *node = malloc (sizeof (struct node));
                    ^
list1.c:12:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
CSOURCE=list2.c EXECBIN=list2
+ cid + list2.c
+ checksource list2.c
+ catnv list2.c
+ for arg in '$*'
+ '[' list2.c = -f ']'
+ label list2.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo list2.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv list2.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2 -lm
+ cat list2.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
list2.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: list2.c,v 1.2 2014-05-04 18:29:20-07 - - $
     2	
     3	#include <assert.h>
     4	#include <stdio.h>
     5	#include <stdlib.h>
     6	
     7	typedef struct node node;
     8	struct node {
     9	   char *word;
    10	   node *link;
    11	};
    12	
    13	int main (int argc, char **argv) {
    14	   (void) argc; // Fix unused variable warning
    15	   node *head;
    16	   for (int argi = 0; argi < 5; ++argi) {
    17	      node *node = malloc (sizeof (struct node));
    18	      assert (node != NULL);
    19	      node->word = argv[argi];
    20	      node->link = head;
    21	      head = node;
    22	   }
    23	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
    24	      printf ("%p->node {word=%p->[%s], link=%p}\n",
    25	              curr, curr->word, curr->word, curr->link);
    26	   }
    27	   return 9;
    28	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ set +x
============================================================
CSOURCE=malloc.c EXECBIN=malloc
+ cid + malloc.c
+ checksource malloc.c
+ catnv malloc.c
+ for arg in '$*'
+ '[' malloc.c = -f ']'
+ label malloc.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo malloc.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv malloc.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 malloc.c -o malloc'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 malloc.c -o malloc'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 malloc.c -o malloc -lm
+ cat malloc.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
malloc.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: malloc.c,v 1.2 2013-02-08 18:01:12-08 - - $
     2	
     3	#include <stdio.h>
     4	#include <stdlib.h>
     5	
     6	typedef struct node node;
     7	struct node {
     8	   int value;
     9	   node *link;
    10	};
    11	
    12	int main (int argc, char **argv) {
    13	   node *ptr = malloc (sizeof (struct node));
    14	   ptr = malloc (sizeof (node));
    15	   ptr->value = 6;
    16	   ptr->link = NULL;
    17	   printf ("%p-> {%d, %p}\n", ptr, ptr->value, ptr->link);
    18	   free (ptr);
    19	   return EXIT_SUCCESS;
    20	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 malloc.c -o malloc
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
malloc.c: In function â€˜mainâ€™:
malloc.c:12:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
malloc.c:12:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
+ set +x
============================================================
CSOURCE=uninit.c EXECBIN=uninit
+ cid + uninit.c
+ checksource uninit.c
+ catnv uninit.c
+ for arg in '$*'
+ '[' uninit.c = -f ']'
+ label uninit.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo uninit.c
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ cat -nv uninit.c
+ label 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ echo 'Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit'
+ echo ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
+ cat uninit.c.log
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
uninit.c
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     1	// $Id: uninit.c,v 1.3 2014-02-18 15:08:14-08 - - $
     2	
     3	#include <stdio.h>
     4	#include <stdlib.h>
     5	
     6	int main (int argc, char **argv) {
     7	   int *pointer;
     8	   printf ("pointer=%p\n", pointer);
     9	   printf ("*pointer=%d\n", *pointer);
    10	   int foo;
    11	   printf ("foo=%d\n", foo);
    12	}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Errors: gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
uninit.c: In function â€˜mainâ€™:
uninit.c:6:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
uninit.c:6:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
uninit.c:8:11: warning: â€˜pointerâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("pointer=%p\n", pointer);
           ^
uninit.c:11:11: warning: â€˜fooâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("foo=%d\n", foo);
           ^
+ set +x
============================================================
[ 7 pages * 1 copy ] left in ./Listing.ps
15 lines were wrapped
3 non-printable characters
33653
33648
gv: Unable to open the display.
]0;kpscanlo@unix1:code[kpscanlo@unix1 code]$ c[Kvalgrind list2 foo bar
==686== Memcheck, a memory error detector
==686== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==686== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==686== Command: list2 foo bar
==686== 
0x4c28180->node {word=0x7ff000095->[LANG=en_US.UTF-8], link=0x4c28130}
0x4c28130->node {word=(nil)->[(null)], link=0x4c280e0}
0x4c280e0->node {word=0x7ff000091->[bar], link=0x4c28090}
0x4c28090->node {word=0x7ff00008d->[foo], link=0x4c28040}
==686== Conditional jump or move depends on uninitialised value(s)
==686==    at 0x400682: main (list2.c:23)
==686== 
==686== 
==686== HEAP SUMMARY:
==686==     in use at exit: 80 bytes in 5 blocks
==686==   total heap usage: 5 allocs, 0 frees, 80 bytes allocated
==686== 
==686== LEAK SUMMARY:
==686==    definitely lost: 16 bytes in 1 blocks
==686==    indirectly lost: 64 bytes in 4 blocks
==686==      possibly lost: 0 bytes in 0 blocks
==686==    still reachable: 0 bytes in 0 blocks
==686==         suppressed: 0 bytes in 0 blocks
==686== Rerun with --leak-check=full to see details of leaked memory
==686== 
==686== For counts of detected and suppressed errors, rerun with: -v
==686== Use --track-origins=yes to see where uninitialised values come from
==686== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
]0;kpscanlo@unix1:code[kpscanlo@unix1 code]$ gdb list2
[?1034hGNU gdb (GDB) Red Hat Enterprise Linux (7.6-34.el6)
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /afs/cats.ucsc.edu/users/x/kpscanlo/private/cmps012b/lab5/lab5c-gdb-valgrind/code/list2...done.
(gdb) break 27
Breakpoint 1 at 0x400684: file list2.c, line 27.
(gdb) run foo bar
Starting program: /afs/cats.ucsc.edu/users/x/kpscanlo/private/cmps012b/lab5/lab5c-gdb-valgrind/code/list2 foo bar
warning: Skipping deprecated .gdb_index section in /usr/lib/debug/lib64/ld-2.12.so.debug.
Do "set use-deprecated-index-sections on" before the file is read
to use the section anyway.
0x601090->node {word=0x7fffffffdf17->[LANG=en_US.UTF-8], link=0x601070}
0x601070->node {word=(nil)->[(null)], link=0x601050}
0x601050->node {word=0x7fffffffdf13->[bar], link=0x601030}
0x601030->node {word=0x7fffffffdf0f->[foo], link=0x601010}

Breakpoint 1, main (argc=3, argv=0x7fffffffdbb8) at list2.c:27
27	   return 9;
(gdb) where
#0  main (argc=3, argv=0x7fffffffdbb8) at list2.c:27
(gdb) list
22	   }
23	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
24	      printf ("%p->node {word=%p->[%s], link=%p}\n",
25	              curr, curr->word, curr->word, curr->link);
26	   }
27	   return 9;
28	}
(gdb) list list2.c:23
18	      assert (node != NULL);
19	      node->word = argv[argi];
20	      node->link = head;
21	      head = node;
22	   }
23	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
24	      printf ("%p->node {word=%p->[%s], link=%p}\n",
25	              curr, curr->word, curr->word, curr->link);
26	   }
27	   return 9;
(gdb) print hear[Kd
$1 = (node *) 0x601090
(gdb) bt
#0  main (argc=3, argv=0x7fffffffdbb8) at list2.c:27
(gdb) print hear[Kd
$2 = (node *) 0x601090
(gdb) print *head
$3 = {word = 0x7fffffffdf17 "LANG=en_US.UTF-8", link = 0x601070}
(gdb) print *(head->word)
$4 = 76 'L'
(gdb) print head->le[Kink_[K->link->link
$5 = (node *) 0x601030
(gdb) print head->link->link->link*head->link->link->link[C[C[C[C[C[C[C[C[C[C[C[C[C(head->link->link->link[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)
$6 = {word = 0x7fffffffdf0f "foo", link = 0x601010}
(gdb) quit
A debugging session is active.

	Inferior 1 [process 697] will be killed.

Quit anyway? (y or n) y
]0;kpscanlo@unix1:code[kpscanlo@unix1 code]$ exit
exit

Script done on Sun 04 May 2014 06:38:34 PM PDT

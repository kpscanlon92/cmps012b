head	1.23;
access;
symbols;
locks;
comment	@# @;


1.23
date	2014.04.29.03.04.41;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.04.29.03.03.05;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.04.29.03.02.44;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.04.29.03.01.30;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.29.03.00.52;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.04.28.06.44.11;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.04.28.06.39.04;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.04.28.06.37.08;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.04.28.06.12.54;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.04.28.06.09.08;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.04.28.06.01.50;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.04.27.21.28.57;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.04.27.21.17.59;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.04.27.21.16.58;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.04.16.02.24.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.04.11.00.36.36;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.04.11.00.29.43;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.04.11.00.29.26;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.04.11.00.29.13;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.11.00.21.23;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.11.00.20.39;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.11.00.20.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.11.00.01.54;	author -;	state -;
branches;
next	;


desc
@@


1.23
log
@-
@
text
@// Name: Kelly Scanlon
// User: kpscanlo

// $Id: edfile.java,v 1.22 2014-04-28 20:03:05-07 - - $

import java.util.Scanner;
import static java.lang.System.*;
import static java.lang.Integer.*;
import java.io.*;

class edfile{

   public static int read_file(String file_name, dllist lines) {
      int num_read_lines = 0;
      try {
         FileInputStream fin;
         DataInputStream din;
         BufferedReader buffer;
         
         String curr_line;
         num_read_lines = 0;
         
         fin = new FileInputStream(file_name);
         din = new DataInputStream(fin);
         buffer = new BufferedReader(new InputStreamReader(din));

         while((curr_line = buffer.readLine()) != null) {
            num_read_lines++;
            lines.insert(curr_line, dllist.position.FOLLOWING);
         }
         din.close();
         lines = null;
      } catch (Exception error) {
         num_read_lines = 0;
         auxlib.warn(error.getMessage());
      }
      return num_read_lines;
   }
   
   public static void write_file(String file_name, dllist lines) {
      int num_write_lines = 0;
      try {
         FileWriter fout;
         BufferedWriter buffer;
         num_write_lines = 0;

         fout = new FileWriter(file_name);
         buffer = new BufferedWriter(fout);

         if(!lines.isempty()) {
            lines.setposition(dllist.position.LAST);
            int last = lines.getposition();
            lines.setposition(dllist.position.FIRST);

            for(int inx = 0; inx <= last; inx++) {
               num_write_lines++;
               buffer.write(lines.getitem() + '\n');
               lines.setposition(dllist.position.FOLLOWING);
            }
         }

         out.printf("%d lines written to %s%n",
                     num_write_lines, file_name);
         buffer.close();
         lines = null;
      } catch (Exception error) {
         num_write_lines = 0;
         auxlib.warn(error.getMessage());
      }

   }

   public static void print_line(int position, String line) {
      out.printf("%6d %s%n", position, line);
   }

   public static boolean empty_print(dllist lines_ref) {
      if(lines_ref.isempty()) {
         out.printf("No lines in file%n");
         lines_ref = null;
         return true;
      }
      lines_ref = null;
      return false;
   }

   public static void main (String[] args) {
      boolean want_echo = false;
      dllist lines = new dllist ();

      // Check for -e option
      // Load file from args filename, if any
      int read_lines = 0;
      for(int inx = 0; inx < args.length; inx++) {
         if(args[inx].equals("-e")) {
            want_echo = true;    
            continue;
         }

         read_lines += read_file(args[inx], lines);
      }
      
      if(read_lines != 0)
         out.printf("%d lines read %n", read_lines); 

      Scanner stdin = new Scanner (in);
      for (;;) {
         out.printf ("%s: ", auxlib.program_name());
         if (! stdin.hasNextLine()) break;
         String inputline = stdin.nextLine();
         if (want_echo) out.printf ("%s%n", inputline);
         if (inputline.matches ("^\\s*$")) continue;
         char command = inputline.charAt(0);
         String line_string = inputline.substring(1);
         switch (command) {
            case '#': break;
            case '$':
               if(empty_print(lines)) continue;
               lines.setposition(dllist.position.LAST);
               print_line(lines.getposition(), lines.getitem());
               break;
            case '*':
               lines.print_list();
               lines.setposition(dllist.position.LAST);
               break;
            case '.':
               if(empty_print(lines)) continue;
               print_line(lines.getposition(), lines.getitem());
               break;
            case '0': 
               if(empty_print(lines)) continue;
               lines.setposition(dllist.position.FIRST);
               print_line(lines.getposition(), lines.getitem());
               break;
            case '<':
               if(empty_print(lines)) continue;
               lines.setposition(dllist.position.PREVIOUS);
               print_line(lines.getposition(), lines.getitem());
               break;
            case '>': 
               if(empty_print(lines)) continue;
               lines.setposition(dllist.position.FOLLOWING);
               print_line(lines.getposition(), lines.getitem());
               break;
            case 'a': 
               lines.insert(line_string, dllist.position.FOLLOWING);
               print_line(lines.getposition(), lines.getitem());
               break;
            case 'd': 
               lines.delete();
               print_line(lines.getposition(), lines.getitem());
               break;
            case 'i': 
               lines.insert(line_string, dllist.position.PREVIOUS);
               print_line(lines.getposition(), lines.getitem());
               break;
            case 'r': 
               int new_file_lines = 0;
               new_file_lines = read_file(line_string, lines);
               out.printf("%d lines read from %s%n", 
                           new_file_lines, line_string);
               break;
            case 'w': 
               write_file(line_string, lines);
               break;
            default :
               auxlib.warn("Not a valid command: ", inputline);
               break;
         }
      }
      out.printf("^D%n");
      stdin.close();

      exit(auxlib.exit_status);
   }

}

@


1.22
log
@-
@
text
@d4 1
a4 1
// $Id: edfile.java,v 1.21 2014-04-28 20:02:44-07 - - $
d14 1
d21 1
a21 1
         int num_read_lines = 0;
d41 1
d45 1
a45 1
         int num_write_lines = 0;
@


1.21
log
@-
@
text
@d4 1
a4 1
// $Id: edfile.java,v 1.19 2014-04-28 20:00:52-07 - - $
d9 1
a9 1
import java.io.*
@


1.20
log
@-
@
text
@d8 2
@


1.19
log
@-
@
text
@d4 1
a4 1
// $Id: edfile.java,v 1.18 2014-04-27 23:44:11-07 - - $
d58 1
a58 1
         out.printf("%d lines written to %s%n"
d61 1
a61 1
         lines = null:
@


1.18
log
@-
@
text
@d1 4
a4 1
// $Id: edfile.java,v 1.17 2014-04-27 23:39:04-07 - - $
d11 58
d96 1
a96 1
         read_lines += auxlib.read_file(args[inx], lines);
d155 1
a155 1
               new_file_lines = auxlib.read_file(line_string, lines);
d160 1
a160 1
               auxlib.write_file(line_string, lines);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.16 2014-04-27 23:37:08-07 - - $
d31 1
a31 1
            want_echo = false;    
d48 3
a50 3
         //char command = inputline.charAt(0);
         String line_string = inputline.substring(0);
         switch (line_string.charAt(0)) {
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.15 2014-04-27 23:12:54-07 - - $
d49 1
a49 1
         String line_string = inputline.substring(1);
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.14 2014-04-27 23:09:08-07 - - $
d48 1
a48 1
         char command = inputline.charAt(0);
d50 1
a50 1
         switch (command) {
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.13 2014-04-27 23:01:50-07 - - $
d95 2
a96 1
               out.printf("%d lines read from %s%n", new_file_lines, line_string);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.9 2014-04-15 19:24:24-07 - - $
d94 1
a94 1
               new_file_lines = auxlib.read_file(line_string);
@


1.12
log
@-
@
text
@a28 3
      if(args.length == 0) {
         auxlib.usage(e.getMessage());
      }
@


1.11
log
@-
@
text
@d30 1
a30 1
         auxlib.usage(error.getMessage());
d52 1
d84 1
a84 1
               lines.insert(inputline.substring(1), dllist.position.FOLLOW);
d92 1
a92 1
               lines.insert(inputline.substring(1), dllist.position.PREVIOUS);
d97 2
a98 2
               new_file_lines = auxlib.read_file(inputline.substring(1));
               out.printf("%d lines read from %s%n", new_file_lines, inputline.substring(1));
d101 1
a101 1
               auxlib.write_file(inputline.substring(1), lines);
d104 1
a104 1
               auxlib.warn("Not a valid command: ", line);
d109 1
a109 1
      scan.close();
d111 1
a111 1
      auxlib.exit();
@


1.10
log
@-
@
text
@d41 1
a41 1
      if(read_lines !- 0)
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.8 2014-04-10 17:36:36-07 - - $
d8 14
d23 1
a23 1
      boolean want_echo = true;
d25 19
a43 2
      auxlib.STUB ("Check for -e option");
      auxlib.STUB ("Load file from args filename, if any.");
d54 51
a104 12
            case '$': auxlib.STUB ("Call $ command function."); break;
            case '*': auxlib.STUB ("Call * command function."); break;
            case '.': auxlib.STUB ("Call . command function."); break;
            case '0': auxlib.STUB ("Call 0 command function."); break;
            case '<': auxlib.STUB ("Call < command function."); break;
            case '>': auxlib.STUB ("Call > command function."); break;
            case 'a': auxlib.STUB ("Call a command function."); break;
            case 'd': auxlib.STUB ("Call d command function."); break;
            case 'i': auxlib.STUB ("Call i command function."); break;
            case 'r': auxlib.STUB ("Call r command function."); break;
            case 'w': auxlib.STUB ("Call w command function."); break;
            default : auxlib.STUB ("Print invalid command."); break;
d107 4
a110 1
      auxlib.STUB ("(eof)");
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.7 2014-04-10 17:29:43-07 - - $
d22 1
a22 1
            case '#': auxlib.STUB ("Call # command function."); break;
d34 1
a34 1
            default : auxlib.STUB ("Print invalid command.");   break;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.6 2014-04-10 17:29:26-07 - - $
d9 1
a9 1
      boolean want_echo = false;
d14 6
a19 3
      while (stdin.hasNextLine()) {
         String inputline = stdin.nextLine().trim();
         if (inputline.length() == 0) continue;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.5 2014-04-10 17:29:13-07 - - $
d3 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.4 2014-04-10 17:21:23-07 - - $
d18 12
a29 12
            case '#': auxlib.STUB ("Call # command function."); break
            case '$': auxlib.STUB ("Call $ command function."); break
            case '*': auxlib.STUB ("Call * command function."); break
            case '.': auxlib.STUB ("Call . command function."); break
            case '0': auxlib.STUB ("Call 0 command function."); break
            case '<': auxlib.STUB ("Call < command function."); break
            case '>': auxlib.STUB ("Call > command function."); break
            case 'a': auxlib.STUB ("Call a command function."); break
            case 'd': auxlib.STUB ("Call d command function."); break
            case 'i': auxlib.STUB ("Call i command function."); break
            case 'r': auxlib.STUB ("Call r command function."); break
            case 'w': auxlib.STUB ("Call w command function."); break
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.3 2014-04-10 17:20:39-07 - - $
d12 22
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.2 2014-04-10 17:20:20-07 - - $
d8 1
a8 1
      bool want_echo = false;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.1 2014-04-10 17:01:54-07 - - $
d10 2
a11 2
      STUB ("Check for -e option");
      STUB ("Load file from args filename, if any.");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: edfile.java,v 1.3 2013-04-11 19:02:25-07 - - $
d8 1
d10 2
a11 6
      out.printf ("%s: ", misclib.program_name());
      if (args.length == 0) {
         lines.setposition (dllist.position.FIRST);
      }else {
         misclib.usage ("[-e]", "[filename...]");
      }
@

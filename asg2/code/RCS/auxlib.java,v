head	1.6;
access;
symbols;
locks;
comment	@# @;


1.6
date	2014.04.29.03.07.37;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.04.28.06.25.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.28.06.12.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.28.06.10.28;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.11.00.30.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.11.00.22.13;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// Name: Kelly Scanlon
// User: kpscanlo

// $Id: auxlib.java,v 1.5 2014-04-27 23:25:18-07 - - $

import static java.lang.System.*;
import static java.lang.Integer.*;
import java.io.*;

class auxlib {
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;
   
   //
   // program_name - Extract the basename of the jar file containing
   // the Java program, which appears as the class path.
   //
   public static String program_name() {
      String jarname = getProperty ("java.class.path");
      return jarname.substring (jarname.lastIndexOf ("/") + 1);
   }

   //
   // warn - Print a warning and set exit status to failure.
   //
   public static void warn (Object... args) {
      exit_status = EXIT_FAILURE;
      out.flush();
      err.printf ("%s", program_name());
      for (Object arg: args) err.printf (": %s", arg);
      err.printf ("%n");
      err.flush();
   }

   //
   // die - Print a warning and exit program.
   //
   public static void die (Object... args) {
      warn (args);
      exit (exit_status);
   }

   //
   // usage - Print a usage message and exit program.
   //
   public static void usage (Object... args) {
      exit_status = EXIT_FAILURE;
      out.flush();
      err.printf ("Usage: %s", program_name());
      for (Object arg: args) err.printf (" %s", arg);
      err.printf ("%n");
      err.flush();
      exit (exit_status);
   }

   public static void STUB (String... args) {
      out.printf ("%s:%n", Thread.currentThread().getStackTrace()[1]);
      for (Object arg: args) out.printf (": %s", arg);
      out.printf ("%n");
   }

}
@


1.5
log
@-
@
text
@d1 4
a4 1
// $Id: auxlib.java,v 1.4 2014-04-27 23:12:12-07 - - $
d14 1
a14 68

   public static int read_num_lines = 0;
   public static int write_num_lines = 0;


   //
   // read_file - takes in a file name and a linked list to read
   // each line in the file into the list. It returns the number 
   // of lines that it read into the line
   //
   public static int read_file(String file_name, dllist lines_ref) {
      try {
         FileInputStream fstream = new FileInputStream( file_name );
         DataInputStream in = new DataInputStream(fstream);
         BufferedReader buf_read = new BufferedReader
                                   (new InputStreamReader(in));
         String curr_line;
         read_num_lines = 0;

         while ((curr_line = buf_read.readLine()) != null) {
            read_num_lines++;
            lines_ref.insert(curr_line, dllist.position.FOLLOWING);
         }
         in.close();
         lines_ref = null;

      } catch (Exception e) {
         auxlib.warn(e.getMessage());
         read_num_lines = 0;

      }
      return read_num_lines;
   }

   //
   // write_file - takes in a file name and a linked list to write
   // all of the lines in the linked list out to the specified file.
   //
   public static void write_file(String file_name, dllist lines_ref) {
      try {

         FileWriter fstream = new FileWriter(file_name);
         BufferedWriter fout = new BufferedWriter(fstream);

         write_num_lines = 0;

         if(!lines_ref.isempty()) {
            lines_ref.setposition(dllist.position.LAST);
            int last = lines_ref.getposition();
            lines_ref.setposition(dllist.position.FIRST);

            for(int inx = 0; inx <= last; inx++) {
               ++write_num_lines;
               fout.write(lines_ref.getitem() + '\n');
               lines_ref.setposition(dllist.position.FOLLOWING);
            }
         }

         out.printf("%d lines written to %s%n",
                     write_num_lines, file_name);
         fout.close();
         lines_ref = null;
      } catch (Exception e) {
         write_num_lines = 0;
         auxlib.warn(e.getMessage());
      }
   }

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: auxlib.java,v 1.3 2014-04-27 23:10:28-07 - - $
d64 1
a64 1
               fout.write(lines_ref.getitem() + 'n');
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: auxlib.java,v 1.2 2014-04-10 17:30:42-07 - - $
d39 1
a39 1
         return read_num_lines = 0;
d42 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: auxlib.java,v 1.1 2014-04-10 17:22:13-07 - - $
d4 2
d12 66
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: misclib.java,v 1.1 2014-04-10 17:01:54-07 - - $
d5 1
a5 1
class misclib {
d54 1
a54 1
      for (Object arg: args) out.printf (" %s", arg);
@

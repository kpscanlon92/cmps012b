head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2014.05.08.01.00.19;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.07.18.08.47;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.07.18.06.22;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.01.17.01.44.47;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: treemap.java,v 1.3 2014-05-07 11:08:47-07 - - $

import static java.lang.System.*;

class treemap <key_t extends Comparable <key_t>, value_t> {

   private class node {
      key_t key;
      value_t value;
      node left;
      node right;
   }
   private node root;

   private void debug_dump_rec (node tree, int depth) {
      if (tree == null) return;
      debug_dump_rec (tree.left, depth + 1);
      for (int i = 0; i < depth; i++) 
         out.printf(" ");
      out.printf("%d %s %s%n", depth, tree.key, tree.value);
      debug_dump_rec (tree.right, depth + 1);
   }

   private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                              node tree) {
      if (tree == null) return;
      do_visit_rec (visit_fn, tree.left);
      visit_fn.visit (tree.key, tree.value);
      do_visit_rec (visit_fn, tree.right);
   }

   public value_t get (key_t key) {
      node curr = root;
      while (curr != null) {
         int cmp = curr.key.compareTo(key);
         if (cmp == 0)
            return curr.value;
         if (cmp < 0)
            curr = curr.right;
         if (cmp > 0)
            curr = curr.left;
      }
      return null;
   }

   public node put_recursive (node curr, key_t key, value_t value) {
      if (curr == null) {
         curr = new node();
         curr.key = key;
         curr.value = value;
         curr.left = null;
         curr.right = null;
      } else if (curr.key.compareTo(key) > 0) {
         curr.left = put_recursive (curr.left, key, value);
      } else if (curr.key.compareTo(key) < 0) {
         curr.right = put_recursive (curr.right, key, value);
      } else {
         curr.value = value;
      }
      return curr;
   }

   public value_t put (key_t key, value_t value) {
      value_t result; 

      result = get (key);
      root = put_recursive (root, key, value);

      return result;
   }

   public void debug_dump () {
      debug_dump_rec (root, 0);
   }

   public void do_visit (visitor <key_t, value_t> visit_fn) {
      do_visit_rec (visit_fn, root);
   }

}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.2 2014-05-07 11:06:22-07 - - $
d18 3
a20 2
      out.printf ( "%" + (depth > 0 ? depth * 3 : "") + "s" 
                  + "%d: %s => %s%n", depth, tree.key, tree.value);
d46 17
d64 1
a64 5
      node tmp = new node();
      tmp.key = key;
      tmp.value = value;
      tmp.left = null;
      tmp.right = null;
d66 4
a69 30
      node curr = root;
      node parent = null;
      boolean left = false;
      while (curr != null) {
         int cmp = curr.key.compareTo(key);
         if (cmp == 0) {
            value_t tmp_value = curr.value;
            curr.value = value;
            return tmp_value;
         }
         parent = curr;
         if(cmp > 0) {
            curr = curr.left;
            left = true;
         } else {
            curr = curr.right;
            left = false;
         }
      }
      if (root == null) {
         root = tmp;
         return null;
      }
      if (left) {
         parent.left = tmp;
         return null;
      } else {
         parent.right = tmp;
         return null;
      }
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-01-16 17:44:47-08 - - $
d71 1
a71 1
      if (root = null) {
d73 1
a73 1
         return;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2011-01-28 19:52:24-08 - - $
d16 5
a20 1
      throw new UnsupportedOperationException ();
d25 4
a28 1
      throw new UnsupportedOperationException ();
d32 11
a42 1
      throw new UnsupportedOperationException ();
d46 36
a81 1
      throw new UnsupportedOperationException ();
@
